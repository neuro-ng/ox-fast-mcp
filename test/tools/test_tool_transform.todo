COMPREHENSIVE TOOL TRANSFORMATION IMPLEMENTATION TODO
====================================================

This file tracks the complete translation of fastmcp/tests/tools/test_tool_transform.py 
to OCaml with TDD approach using expect_test_helpers_core and ppx_expect.

## PYTHON TO OCAML MODULE MAPPING

### ‚úÖ AVAILABLE MAPPINGS
```python                               -> OCaml
from fastmcp.tools.tool_transform       -> Tools.Tool_transform  
from fastmcp.tools.tool                 -> Tools.Tool_types
from fastmcp.tools.tool_transform       -> Tools.Tool_types.Arg_transform, transformed
from fastmcp.utilities.json_schema      -> Utilities.Json_schema
from mcp.types                         -> Mcp.Types
from fastmcp.exceptions                -> Exceptions
```

### üö´ MISSING OCAML EQUIVALENTS
```python                               -> Missing OCaml
from fastmcp import FastMCP             -> No server module equivalent yet (planned: Server)
from fastmcp.client.client import Client -> Client module exists but needs enhancement
from fastmcp.tools import forward, forward_raw -> Not implemented in Tools.Tool_transform
import re                               -> Re module (available but needs wrapper)
from dataclasses import dataclass       -> Use records with [@@deriving yojson_of, yojson_to]
from typing import Annotated, Any       -> Use polymorphic variants and option types
import pytest                           -> expect_test_helpers_core (translated)
from dirty_equals import IsList         -> Use Base.List functions
from pydantic import BaseModel, Field   -> Use records with ppx_yojson_conv
from typing_extensions import TypedDict -> Use records with ppx_yojson_conv
```

### üìù MODULE ORGANIZATION
```ocaml
(* Core modules *)
open Base
open Core
open Expect_test_helpers_core
open Tools.Tool_types
open Tools.Tool_transform
open Utilities.Types
open Utilities.Json_schema
open Mcp.Types
open Exceptions

(* Optional/Future modules *)
open Client (* When proxy tests are implemented *)
open Re    (* For regex operations *)
```

## TRANSLATION PROGRESS

### ‚úÖ COMPLETED (17/45 tests translated - 38% complete)

#### Basic Tool Transformation Tests
- [x] `test_tool_from_tool_no_change` -> "tool from tool no change"
- [x] `test_renamed_arg_description_is_maintained` -> "renamed arg description is maintained"  
- [x] `test_tool_defaults_are_maintained_on_unmapped_args` -> "tool defaults maintained on unmapped args"
- [x] `test_tool_defaults_are_maintained_on_mapped_args` -> "tool defaults maintained on mapped args"
- [x] `test_tool_change_arg_name` -> "tool change arg name"
- [x] `test_tool_change_arg_description` -> "tool change arg description"
- [x] `test_tool_drop_arg` -> "tool drop arg"

#### Argument Validation Tests  
- [x] `test_dropped_args_error_if_provided` -> "dropped args error if provided"
- [x] `test_transform_args_validation_unknown_arg` -> "transform args validation unknown arg"
- [x] `test_transform_args_creates_duplicate_names` -> "transform args creates duplicate names"

#### Hidden Arguments Tests
- [x] `test_hidden_arg_with_constant_default` -> "hidden arg with constant default"
- [x] `test_hidden_arg_without_default_uses_parent_default` -> "hidden arg without default uses parent default"
- [x] `test_hide_required_param_without_default_raises_error` -> "hide required param without default raises error"
- [x] `test_hide_required_param_with_user_default_works` -> "hide required param with user default works"

#### Validation and Error Handling Tests
- [x] Missing required arguments validation (custom test)
- [x] Schema structure validation (custom test)

#### Type Transformation Tests
- [x] `test_arg_transform_type_handling` -> "arg transform type handling - various types"

#### Examples Tests
- [x] `test_arg_transform_examples_in_schema` -> "arg transform examples in schema"

### ‚ö†Ô∏è HIGH PRIORITY TODO (28/45 tests remaining - 62% to complete)

#### 1. Forward/Forward_raw Context Management (5 tests)
**Status**: Basic structure exists but not integrated with tool execution  
**Issue**: `forward()` and `forward_raw()` need proper context management during tool execution

**Missing Tests**:
- [ ] `test_forward_with_argument_mapping`
- [ ] `test_forward_with_incorrect_args_raises_error` 
- [ ] `test_forward_raw_without_argument_mapping`
- [ ] `test_forward_outside_context_raises_error`
- [ ] `test_forward_raw_outside_context_raises_error`

**Implementation needed in**:
- `lib/tools/tool_transform.ml` - enhance context management
- `lib/tools/tool_transform.mli` - export forward/forward_raw functions

#### 2. Custom Transform Functions (8 tests)
**Status**: Basic structure exists but needs full implementation
**Issue**: `transform_fn` parameter support with schema merging and kwargs handling

**Missing Tests**:
- [ ] `test_mixed_hidden_args_with_custom_function`
- [ ] `test_custom_fn_with_kwargs_and_no_transform_args`
- [ ] `test_fn_with_kwargs_passes_through_original_args`
- [ ] `test_fn_with_kwargs_receives_transformed_arg_names`
- [ ] `test_fn_with_kwargs_handles_partial_explicit_args`
- [ ] `test_fn_with_kwargs_mixed_mapped_and_unmapped_args`
- [ ] `test_fn_with_kwargs_dropped_args_not_in_kwargs`

**OCaml Challenge**: No direct **kwargs equivalent - need creative solution

#### 3. Function Parameter Validation (3 tests)
**Status**: Placeholder implementation only
**Issue**: Need function signature inspection and validation

**Missing Tests**:
- [ ] `test_function_without_kwargs_missing_params`
- [ ] `test_function_without_kwargs_can_have_extra_params`  
- [ ] `test_function_with_kwargs_can_add_params`

**OCaml Challenge**: No direct function signature inspection - need alternative approach

#### 4. Advanced ArgTransform Features (10 tests)
**Status**: Basic validation exists but functionality missing
**Issue**: `default_factory`, `required=True` handling needs implementation

**Missing Tests**:
- [ ] `test_arg_transform_default_factory`
- [ ] `test_arg_transform_default_factory_called_each_time`
- [ ] `test_arg_transform_hidden_with_default_factory`
- [ ] `test_arg_transform_required_true`
- [ ] `test_arg_transform_required_false`
- [ ] `test_arg_transform_required_with_rename`
- [ ] `test_arg_transform_required_true_with_default_raises_error`
- [ ] `test_arg_transform_required_true_with_factory_raises_error`
- [ ] `test_arg_transform_required_no_change`
- [ ] `test_arg_transform_hide_and_required_raises_error`

### ‚ö†Ô∏è MEDIUM PRIORITY TODO

#### 5. Complex Type System Integration (5 tests)
**Status**: Basic type strings only
**Issue**: Need support for complex types and schema merging

**Missing Tests**:
- [ ] `test_arg_transform_annotated_types`
- [ ] `test_arg_transform_precedence_over_function_without_kwargs`
- [ ] `test_arg_transform_precedence_over_function_with_kwargs`
- [ ] `test_arg_transform_combined_attributes`
- [ ] `test_arg_transform_type_precedence_runtime`

**OCaml Approach**: Use records/modules instead of Pydantic models

#### 6. Tool Chaining (1 test)
**Status**: Basic support exists
**Issue**: Need enhanced chaining with custom functions

**Missing Tests**:
- [ ] `test_tool_transform_chaining`

#### 7. FastMCP Integration Features (3 tests)
**Status**: No OCaml equivalents exist
**Issue**: Need FastMCP server and client modules

**Missing Tests**:
- [ ] `TestProxy.test_transform_proxy`
- [ ] `TestEnableDisable.test_transform_disabled_tool`
- [ ] `TestEnableDisable.test_disable_transformed_tool`

**Dependencies needed**:
- FastMCP server equivalent
- Client module  
- ToolError exception type

## ARCHITECTURAL CHALLENGES

### OCaml vs Python Differences

1. **No **kwargs equivalent**
   - **Python**: `def func(**kwargs)` accepts arbitrary keyword arguments
   - **OCaml Solution**: Use labeled arguments with optional parameters or records

2. **No runtime function signature inspection**
   - **Python**: `inspect.signature()` for parameter validation
   - **OCaml Solution**: Static typing with explicit schemas

3. **Different object model**
   - **Python**: Pydantic models with Field annotations
   - **OCaml Solution**: Records with ppx_yojson_conv for JSON serialization

4. **Different async model**
   - **Python**: `async`/`await` with asyncio
   - **OCaml**: `Lwt` monads and ppx_lwt syntax

### Required Design Patterns

1. **Context Management Pattern**
   ```ocaml
   (* Current tool context for forward() calls *)
   let current_tool : transformed option ref = ref None
   
   (* Set context during tool execution *)
   let execute_with_context tool ctx args =
     current_tool := Some tool;
     let%lwt result = tool.fn ctx args in
     current_tool := None;
     Lwt.return result
   ```

2. **Schema Merging Pattern**
   ```ocaml
   (* Merge function schema with transform schema *)
   let merge_schemas ~base_schema ~transform_schema ~precedence = ...
   ```

3. **Validation Pattern**
   ```ocaml
   (* Validate function parameters against transforms *)
   let validate_function_parameters ~fn_params ~transform_params = ...
   ```

## IMPLEMENTATION PLAN

### Phase 1: Core Context Management (Week 1)
1. Implement proper `forward()`/`forward_raw()` context management
2. Add context setting during tool execution
3. Add validation for forward calls outside context
4. **Target**: 5 forward-related tests passing

### Phase 2: Custom Transform Functions (Week 2)  
1. Implement `transform_fn` parameter support
2. Design OCaml equivalent of **kwargs pattern
3. Add schema merging with custom functions
4. **Target**: 8 custom function tests passing

### Phase 3: Advanced ArgTransform (Week 3)
1. Implement `default_factory` functionality
2. Add `required=True/False` handling  
3. Enhance validation and error messages
4. **Target**: 10 advanced ArgTransform tests passing

### Phase 4: Complex Features (Week 4)
1. Function parameter validation system
2. Complex type system integration
3. Enhanced tool chaining
4. **Target**: All core functionality tests passing

### Phase 5: Integration (Week 5)
1. FastMCP server integration (if available)
2. Client module integration (if available)
3. End-to-end testing
4. **Target**: Full test suite passing

## SUCCESS METRICS

- **Code Coverage**: All 45 Python tests translated to OCaml
- **Test Quality**: All expect tests demonstrate actual vs expected behavior
- **Type Safety**: Full OCaml type checking with no runtime errors
- **Performance**: Tool transformation operations complete in <1ms
- **Maintainability**: Clear module structure following Jane Street patterns

## CURRENT STATUS SUMMARY

```
Total Python Tests: 45
Translated to OCaml: 17 (38%)
High Priority TODO: 21 tests (47%)  
Medium Priority TODO: 7 tests (15%)
Implementation Progress: 38% complete
```

**Next Priority**: Implement forward()/forward_raw() context management (5 tests) 

## RECENT ADDITIONS (Latest Session)

### ‚úÖ NEW TESTS IMPLEMENTED:
- Hidden required parameter validation
- Custom tool creation for comprehensive testing
- Missing required arguments validation
- Schema structure validation
- Additional error handling scenarios

### üîß IMPROVEMENTS MADE:
- Better error messages for hidden parameter issues
- More comprehensive validation testing
- Enhanced schema structure verification
- Additional test helpers for complex scenarios

The implementation is now at 38% completion with solid foundation for error handling and validation. The next major milestone is implementing the forward/forward_raw context management system. 