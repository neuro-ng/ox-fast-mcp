# HTTP Test Module TODOs

## Implementation Notes
- Using Jane Street's expect_test framework for testing
- Tests cover basic port availability and uniqueness
- Using Core_unix for socket operations in tests

## Test Coverage
Current coverage:
- ✓ Basic port number validation
- ✓ Port availability verification
- ✓ Unique port allocation

Potential additional tests to consider:
- Error handling for socket operations
- Concurrent port allocation testing
- Performance testing for multiple consecutive calls

## Python to OCaml Test Framework Mappings
- Python `unittest` → OCaml `expect_test_helpers_core`
- Python `self.assert*` → OCaml `[%test_result]` and `[%expect]`
- Python context managers → OCaml explicit resource management

## Additional Considerations
- Tests use Jane Street's sexp-based output validation
- Explicit port range validation (1-65535)
- Resource cleanup with explicit socket closure
- Non-deterministic port allocation handled appropriately in expect tests 

Changes made to test_http.ml:

✓ Fixed expect test for port number validation
  - Changed to check port validity boolean instead of specific port number
  - Removed dependency on actual port numbers which vary between runs
  - Maintained socket binding test for port availability

✓ Fixed expect test for consecutive port calls
  - Changed to check ports_are_different boolean instead of specific port numbers
  - Simplified test to focus on port uniqueness rather than actual values

✓ Code cleanup
  - Added proper open directives with ! for Core and Async
  - Consistent formatting and semicolon usage
  - Clear comments explaining test behavior

Future considerations:
- Consider adding tests for concurrent port allocation
- Consider adding tests for specific port ranges
- Consider adding tests for error cases (e.g., no available ports) 