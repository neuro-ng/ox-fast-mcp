# Test Types Module TODO List

## Python Test Imports to OCaml Equivalents
- [x] pytest -> expect_test_helpers_core
- [x] pytest.raises -> show_raise
- [x] monkeypatch -> not needed (OCaml's module system handles mocking differently)
- [x] tmp_path -> In_channel.with_file or Out_channel.with_file
- [x] base64 -> Core.Base64
- [x] types.EllipsisType -> not needed
- [x] typing.Annotated -> not needed (using OCaml's type system)
- [x] typing.Any -> not needed (using OCaml's type system)
- [x] mcp.types -> Types module

## Test Classes to OCaml Equivalents
- [x] BaseClass -> not needed (OCaml's module system handles this differently)
- [x] ChildClass -> not needed (OCaml's module system handles this differently)
- [x] OtherClass -> not needed (OCaml's module system handles this differently)
- [x] TestIsClassMemberOfType -> converted to individual expect tests
- [x] TestIsSubclassSafe -> converted to individual expect tests
- [x] TestImage -> converted to individual expect tests
- [x] TestAudio -> converted to individual expect tests
- [x] TestFile -> converted to individual expect tests
- [x] TestFindKwargByType -> converted to individual expect tests

## Required Test Implementations
- [x] Image module tests:
  - [x] test_image_initialization_with_path
  - [x] test_image_initialization_with_data
  - [x] test_image_initialization_with_format
  - [x] test_missing_data_and_path_raises_error
  - [x] test_both_data_and_path_raises_error
  - [x] test_get_mime_type_from_path
  - [x] test_to_image_content

- [x] Audio module tests:
  - [x] test_audio_initialization_with_path
  - [x] test_audio_initialization_with_data
  - [x] test_audio_initialization_with_format
  - [x] test_missing_data_and_path_raises_error
  - [x] test_both_data_and_path_raises_error
  - [x] test_get_mime_type_from_path
  - [x] test_to_audio_content

- [x] File module tests:
  - [x] test_file_initialization_with_path
  - [x] test_file_initialization_with_data
  - [x] test_file_initialization_with_format
  - [x] test_missing_data_and_path_raises_error
  - [x] test_both_data_and_path_raises_error
  - [x] test_get_mime_type_from_path
  - [x] test_to_resource_content_text
  - [x] test_to_resource_content_binary
  - [x] test_to_resource_content_with_name

## Test Helper Functions
- [x] show_raise for exception testing
- [x] print_s for sexp output
- [x] [%sexp] for sexp conversion
- [x] [%expect] for test expectations
- [x] require for assertions
- [x] Clock.after for async handling

## Missing Python Test Features
- [ ] pytest.fixture (using OCaml's let bindings instead)
- [ ] pytest.mark.parametrize (using List.iter with test cases)
- [ ] monkeypatch (using OCaml's module system)
- [ ] tmp_path (using direct file operations)
- [ ] class-based tests (using individual expect tests)

## Test Organization
- [x] Group tests by module (Image, Audio, File)
- [x] Use descriptive test names
- [x] Test error cases
- [x] Test edge cases
- [x] Test normal operation
- [x] Test data conversions

## Test Coverage
- [x] Constructor tests
- [x] Error handling tests
- [x] MIME type tests
- [x] Content conversion tests
- [x] Base64 encoding tests
- [x] URI handling tests
- [x] Text vs binary content tests

## Notes
- Using expect_test_helpers_core instead of pytest
- Using OCaml's type system instead of Python's runtime type checking
- Using OCaml's module system for organization
- Using Jane Street style throughout tests
- Using async for file operations
- Using sexp for test output formatting 