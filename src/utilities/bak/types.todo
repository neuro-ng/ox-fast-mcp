# Python to OCaml Type Mappings and Missing Functionality

## Python Imports to OCaml Equivalents
- [x] base64 -> Core.Base64
- [x] pathlib.Path -> Filename.t
- [x] pydantic -> Core.Stable
- [x] mimetypes -> Magic_mime
- [x] AnyUrl -> Uri.t
- [ ] inspect -> No direct equivalent, using OCaml's type system
- [ ] types.UnionType -> No direct equivalent, using polymorphic variants
- [ ] typing.Annotated -> No direct equivalent, using OCaml's type system
- [ ] typing.TypeVar -> No direct equivalent, using OCaml's polymorphic types
- [ ] typing.Union -> No direct equivalent, using polymorphic variants
- [ ] typing.get_args -> No direct equivalent, using OCaml's type system
- [ ] typing.get_origin -> No direct equivalent, using OCaml's type system
- [ ] collections.abc.Callable -> No direct equivalent, using OCaml's first-class functions
- [ ] functools.lru_cache -> No direct equivalent, implement custom caching if needed

## MCP Types to OCaml Equivalents
- [x] mcp.types.Annotations -> Types.Annotations.t
- [x] mcp.types.AudioContent -> Types.AudioContent.t
- [x] mcp.types.BlobResourceContents -> Types.BlobResourceContents.t
- [x] mcp.types.EmbeddedResource -> Types.EmbeddedResource.t
- [x] mcp.types.ImageContent -> Types.ImageContent.t
- [x] mcp.types.TextResourceContents -> Types.TextResourceContents.t

## Required Implementations
- [x] Image module with:
  - [x] create function with path/data/format options
  - [x] get_mime_type function
  - [x] to_image_content function
  - [x] Base64 encoding for binary data
  - [x] MIME type detection from file extension

- [x] Audio module with:
  - [x] create function with path/data/format options
  - [x] get_mime_type function
  - [x] to_audio_content function
  - [x] Base64 encoding for binary data
  - [x] MIME type detection from file extension

- [x] File module with:
  - [x] create function with path/data/format/name options
  - [x] get_mime_type function
  - [x] to_resource_content function
  - [x] Base64 encoding for binary data
  - [x] MIME type detection from file extension
  - [x] URI handling for file paths

## PPX Support
- [x] ppx_yojson_conv for JSON serialization
- [x] ppx_compare for comparison functions
- [x] ppx_sexp_conv for S-expression support
- [x] ppx_fields_conv for field accessors

## Required Jane Street Libraries
- [x] core for stable versioning and base types
- [x] async for asynchronous operations
- [x] base64 for encoding/decoding
- [x] magic-mime for MIME type detection
- [x] uri for URI handling

## Missing Python Features
- [ ] Runtime type checking (using OCaml's type system instead)
- [ ] Dynamic type inspection (using OCaml's type system instead)
- [ ] Type adapters (using OCaml's type system instead)
- [ ] Union types (using polymorphic variants instead)
- [ ] Annotated types (using OCaml's type system instead)
- [ ] LRU caching (implement if needed)

## Notes
- OCaml implementation uses static typing instead of Python's runtime type checking
- Polymorphic variants used for union types
- Core.Stable versioning used for serialization
- Jane Street style followed throughout the implementation 